"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEmptyCredentials = isEmptyCredentials;
exports.refreshKMSCredentials = refreshKMSCredentials;
const aws_1 = require("./aws");
const azure_1 = require("./azure");
const gcp_1 = require("./gcp");
/**
 * Auto credential fetching should only occur when the provider is defined on the kmsProviders map
 * and the settings are an empty object.
 *
 * This is distinct from a nullish provider key.
 *
 * @internal - exposed for testing purposes only
 */
function isEmptyCredentials(providerName, kmsProviders) {
    const provider = kmsProviders[providerName];
    if (provider == null) {
        return false;
    }
    return typeof provider === 'object' && Object.keys(provider).length === 0;
}
/**
 * Load cloud provider credentials for the user provided KMS providers.
 * Credentials will only attempt to get loaded if they do not exist
 * and no existing credentials will get overwritten.
 *
 * @internal
 */
function refreshKMSCredentials(kmsProviders, credentialProviders) {
    return __awaiter(this, void 0, void 0, function* () {
        let finalKMSProviders = kmsProviders;
        if (isEmptyCredentials('aws', kmsProviders)) {
            finalKMSProviders = yield (0, aws_1.loadAWSCredentials)(finalKMSProviders, credentialProviders === null || credentialProviders === void 0 ? void 0 : credentialProviders.aws);
        }
        if (isEmptyCredentials('gcp', kmsProviders)) {
            finalKMSProviders = yield (0, gcp_1.loadGCPCredentials)(finalKMSProviders);
        }
        if (isEmptyCredentials('azure', kmsProviders)) {
            finalKMSProviders = yield (0, azure_1.loadAzureCredentials)(finalKMSProviders);
        }
        return finalKMSProviders;
    });
}
