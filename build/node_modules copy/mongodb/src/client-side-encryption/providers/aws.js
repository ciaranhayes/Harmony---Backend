"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadAWSCredentials = loadAWSCredentials;
const aws_temporary_credentials_1 = require("../../cmap/auth/aws_temporary_credentials");
/**
 * @internal
 */
function loadAWSCredentials(kmsProviders, provider) {
    return __awaiter(this, void 0, void 0, function* () {
        const credentialProvider = new aws_temporary_credentials_1.AWSSDKCredentialProvider(provider);
        // We shouldn't ever receive a response from the AWS SDK that doesn't have a `SecretAccessKey`
        // or `AccessKeyId`.  However, TS says these fields are optional.  We provide empty strings
        // and let libmongocrypt error if we're unable to fetch the required keys.
        const { SecretAccessKey = '', AccessKeyId = '', Token } = yield credentialProvider.getCredentials();
        const aws = {
            secretAccessKey: SecretAccessKey,
            accessKeyId: AccessKeyId
        };
        // the AWS session token is only required for temporary credentials so only attach it to the
        // result if it's present in the response from the aws sdk
        Token != null && (aws.sessionToken = Token);
        return Object.assign(Object.assign({}, kmsProviders), { aws });
    });
}
