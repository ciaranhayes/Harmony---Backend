"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutomatedCallbackWorkflow = void 0;
const error_1 = require("../../../error");
const timeout_1 = require("../../../timeout");
const mongodb_oidc_1 = require("../mongodb_oidc");
const callback_workflow_1 = require("./callback_workflow");
/**
 * Class implementing behaviour for the non human callback workflow.
 * @internal
 */
class AutomatedCallbackWorkflow extends callback_workflow_1.CallbackWorkflow {
    /**
     * Instantiate the human callback workflow.
     */
    constructor(cache, callback) {
        super(cache, callback);
    }
    /**
     * Execute the OIDC callback workflow.
     */
    execute(connection, credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            // If there is a cached access token, try to authenticate with it. If
            // authentication fails with an Authentication error (18),
            // invalidate the access token, fetch a new access token, and try
            // to authenticate again.
            // If the server fails for any other reason, do not clear the cache.
            if (this.cache.hasAccessToken) {
                const token = this.cache.getAccessToken();
                try {
                    return yield this.finishAuthentication(connection, credentials, token);
                }
                catch (error) {
                    if (error instanceof error_1.MongoError &&
                        error.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed) {
                        this.cache.removeAccessToken();
                        return yield this.execute(connection, credentials);
                    }
                    else {
                        throw error;
                    }
                }
            }
            const response = yield this.fetchAccessToken(credentials);
            this.cache.put(response);
            connection.accessToken = response.accessToken;
            yield this.finishAuthentication(connection, credentials, response.accessToken);
        });
    }
    /**
     * Fetches the access token using the callback.
     */
    fetchAccessToken(credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            const controller = new AbortController();
            const params = {
                timeoutContext: controller.signal,
                version: mongodb_oidc_1.OIDC_VERSION
            };
            if (credentials.username) {
                params.username = credentials.username;
            }
            const timeout = timeout_1.Timeout.expires(callback_workflow_1.AUTOMATED_TIMEOUT_MS);
            try {
                return yield Promise.race([this.executeAndValidateCallback(params), timeout]);
            }
            catch (error) {
                if (timeout_1.TimeoutError.is(error)) {
                    controller.abort();
                    throw new error_1.MongoOIDCError(`OIDC callback timed out after ${callback_workflow_1.AUTOMATED_TIMEOUT_MS}ms.`);
                }
                throw error;
            }
            finally {
                timeout.clear();
            }
        });
    }
}
exports.AutomatedCallbackWorkflow = AutomatedCallbackWorkflow;
