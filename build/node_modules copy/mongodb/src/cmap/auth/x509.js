"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.X509 = void 0;
const error_1 = require("../../error");
const utils_1 = require("../../utils");
const auth_provider_1 = require("./auth_provider");
class X509 extends auth_provider_1.AuthProvider {
    prepare(handshakeDoc, authContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const { credentials } = authContext;
            if (!credentials) {
                throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');
            }
            return Object.assign(Object.assign({}, handshakeDoc), { speculativeAuthenticate: x509AuthenticateCommand(credentials) });
        });
    }
    auth(authContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = authContext.connection;
            const credentials = authContext.credentials;
            if (!credentials) {
                throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');
            }
            const response = authContext.response;
            if (response === null || response === void 0 ? void 0 : response.speculativeAuthenticate) {
                return;
            }
            yield connection.command((0, utils_1.ns)('$external.$cmd'), x509AuthenticateCommand(credentials), undefined);
        });
    }
}
exports.X509 = X509;
function x509AuthenticateCommand(credentials) {
    const command = { authenticate: 1, mechanism: 'MONGODB-X509' };
    if (credentials.username) {
        command.user = credentials.username;
    }
    return command;
}
