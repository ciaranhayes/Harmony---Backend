"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;
exports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;
exports.resolveCname = resolveCname;
const dns = __importStar(require("dns"));
const deps_1 = require("../../deps");
const error_1 = require("../../error");
const utils_1 = require("../../utils");
const auth_provider_1 = require("./auth_provider");
/** @public */
exports.GSSAPICanonicalizationValue = Object.freeze({
    on: true,
    off: false,
    none: 'none',
    forward: 'forward',
    forwardAndReverse: 'forwardAndReverse'
});
function externalCommand(connection, command) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield connection.command((0, utils_1.ns)('$external.$cmd'), command);
        return response;
    });
}
let krb;
class GSSAPI extends auth_provider_1.AuthProvider {
    auth(authContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const { connection, credentials } = authContext;
            if (credentials == null) {
                throw new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication');
            }
            const { username } = credentials;
            const client = yield makeKerberosClient(authContext);
            const payload = yield client.step('');
            const saslStartResponse = yield externalCommand(connection, saslStart(payload));
            const negotiatedPayload = yield negotiate(client, 10, saslStartResponse.payload);
            const saslContinueResponse = yield externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId));
            const finalizePayload = yield finalize(client, username, saslContinueResponse.payload);
            yield externalCommand(connection, {
                saslContinue: 1,
                conversationId: saslContinueResponse.conversationId,
                payload: finalizePayload
            });
        });
    }
}
exports.GSSAPI = GSSAPI;
function makeKerberosClient(authContext) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const { hostAddress } = authContext.options;
        const { credentials } = authContext;
        if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {
            throw new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.');
        }
        loadKrb();
        if ('kModuleError' in krb) {
            throw krb['kModuleError'];
        }
        const { initializeClient } = krb;
        const { username, password } = credentials;
        const mechanismProperties = credentials.mechanismProperties;
        const serviceName = (_a = mechanismProperties.SERVICE_NAME) !== null && _a !== void 0 ? _a : 'mongodb';
        const host = yield performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);
        const initOptions = {};
        if (password != null) {
            // TODO(NODE-5139): These do not match the typescript options in initializeClient
            Object.assign(initOptions, { user: username, password: password });
        }
        const spnHost = (_b = mechanismProperties.SERVICE_HOST) !== null && _b !== void 0 ? _b : host;
        let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;
        if ('SERVICE_REALM' in mechanismProperties) {
            spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;
        }
        return yield initializeClient(spn, initOptions);
    });
}
function saslStart(payload) {
    return {
        saslStart: 1,
        mechanism: 'GSSAPI',
        payload,
        autoAuthorize: 1
    };
}
function saslContinue(payload, conversationId) {
    return {
        saslContinue: 1,
        conversationId,
        payload
    };
}
function negotiate(client, retries, payload) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = yield client.step(payload);
            return response || '';
        }
        catch (error) {
            if (retries === 0) {
                // Retries exhausted, raise error
                throw error;
            }
            // Adjust number of retries and call step again
            return yield negotiate(client, retries - 1, payload);
        }
    });
}
function finalize(client, user, payload) {
    return __awaiter(this, void 0, void 0, function* () {
        // GSS Client Unwrap
        const response = yield client.unwrap(payload);
        return yield client.wrap(response || '', { user });
    });
}
function performGSSAPICanonicalizeHostName(host, mechanismProperties) {
    return __awaiter(this, void 0, void 0, function* () {
        const mode = mechanismProperties.CANONICALIZE_HOST_NAME;
        if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {
            return host;
        }
        // If forward and reverse or true
        if (mode === exports.GSSAPICanonicalizationValue.on ||
            mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {
            // Perform the lookup of the ip address.
            const { address } = yield dns.promises.lookup(host);
            try {
                // Perform a reverse ptr lookup on the ip address.
                const results = yield dns.promises.resolvePtr(address);
                // If the ptr did not error but had no results, return the host.
                return results.length > 0 ? results[0] : host;
            }
            catch (_a) {
                // This can error as ptr records may not exist for all ips. In this case
                // fallback to a cname lookup as dns.lookup() does not return the
                // cname.
                return yield resolveCname(host);
            }
        }
        else {
            // The case for forward is just to resolve the cname as dns.lookup()
            // will not return it.
            return yield resolveCname(host);
        }
    });
}
function resolveCname(host) {
    return __awaiter(this, void 0, void 0, function* () {
        // Attempt to resolve the host name
        try {
            const results = yield dns.promises.resolveCname(host);
            // Get the first resolved host id
            return results.length > 0 ? results[0] : host;
        }
        catch (_a) {
            return host;
        }
    });
}
/**
 * Load the Kerberos library.
 */
function loadKrb() {
    if (!krb) {
        krb = (0, deps_1.getKerberos)();
    }
}
