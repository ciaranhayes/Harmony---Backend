"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plain = void 0;
const bson_1 = require("../../bson");
const error_1 = require("../../error");
const utils_1 = require("../../utils");
const auth_provider_1 = require("./auth_provider");
class Plain extends auth_provider_1.AuthProvider {
    auth(authContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const { connection, credentials } = authContext;
            if (!credentials) {
                throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');
            }
            const { username, password } = credentials;
            const payload = new bson_1.Binary(Buffer.from(`\x00${username}\x00${password}`));
            const command = {
                saslStart: 1,
                mechanism: 'PLAIN',
                payload: payload,
                autoAuthorize: 1
            };
            yield connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined);
        });
    }
}
exports.Plain = Plain;
