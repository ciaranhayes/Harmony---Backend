"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthProvider = exports.AuthContext = void 0;
const error_1 = require("../../error");
/**
 * Context used during authentication
 * @internal
 */
class AuthContext {
    constructor(connection, credentials, options) {
        /** If the context is for reauthentication. */
        this.reauthenticating = false;
        this.connection = connection;
        this.credentials = credentials;
        this.options = options;
    }
}
exports.AuthContext = AuthContext;
/**
 * Provider used during authentication.
 * @internal
 */
class AuthProvider {
    /**
     * Prepare the handshake document before the initial handshake.
     *
     * @param handshakeDoc - The document used for the initial handshake on a connection
     * @param authContext - Context for authentication flow
     */
    prepare(handshakeDoc, _authContext) {
        return __awaiter(this, void 0, void 0, function* () {
            return handshakeDoc;
        });
    }
    /**
     * Reauthenticate.
     * @param context - The shared auth context.
     */
    reauth(context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (context.reauthenticating) {
                throw new error_1.MongoRuntimeError('Reauthentication already in progress.');
            }
            try {
                context.reauthenticating = true;
                yield this.auth(context);
            }
            finally {
                context.reauthenticating = false;
            }
        });
    }
}
exports.AuthProvider = AuthProvider;
