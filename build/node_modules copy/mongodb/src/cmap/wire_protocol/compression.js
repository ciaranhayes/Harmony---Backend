"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uncompressibleCommands = exports.Compressor = void 0;
exports.compress = compress;
exports.decompress = decompress;
exports.compressCommand = compressCommand;
exports.decompressResponse = decompressResponse;
const util_1 = require("util");
const zlib = __importStar(require("zlib"));
const constants_1 = require("../../constants");
const deps_1 = require("../../deps");
const error_1 = require("../../error");
const commands_1 = require("../commands");
const constants_2 = require("./constants");
/** @public */
exports.Compressor = Object.freeze({
    none: 0,
    snappy: 1,
    zlib: 2,
    zstd: 3
});
exports.uncompressibleCommands = new Set([
    constants_1.LEGACY_HELLO_COMMAND,
    'saslStart',
    'saslContinue',
    'getnonce',
    'authenticate',
    'createUser',
    'updateUser',
    'copydbSaslStart',
    'copydbgetnonce',
    'copydb'
]);
const ZSTD_COMPRESSION_LEVEL = 3;
const zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));
const zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));
let zstd;
let Snappy = null;
function loadSnappy() {
    if (Snappy == null) {
        const snappyImport = (0, deps_1.getSnappy)();
        if ('kModuleError' in snappyImport) {
            throw snappyImport.kModuleError;
        }
        Snappy = snappyImport;
    }
    return Snappy;
}
// Facilitate compressing a message using an agreed compressor
function compress(options, dataToBeCompressed) {
    return __awaiter(this, void 0, void 0, function* () {
        const zlibOptions = {};
        switch (options.agreedCompressor) {
            case 'snappy': {
                Snappy !== null && Snappy !== void 0 ? Snappy : (Snappy = loadSnappy());
                return yield Snappy.compress(dataToBeCompressed);
            }
            case 'zstd': {
                loadZstd();
                if ('kModuleError' in zstd) {
                    throw zstd['kModuleError'];
                }
                return yield zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);
            }
            case 'zlib': {
                if (options.zlibCompressionLevel) {
                    zlibOptions.level = options.zlibCompressionLevel;
                }
                return yield zlibDeflate(dataToBeCompressed, zlibOptions);
            }
            default: {
                throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);
            }
        }
    });
}
// Decompress a message using the given compressor
function decompress(compressorID, compressedData) {
    return __awaiter(this, void 0, void 0, function* () {
        if (compressorID !== exports.Compressor.snappy &&
            compressorID !== exports.Compressor.zstd &&
            compressorID !== exports.Compressor.zlib &&
            compressorID !== exports.Compressor.none) {
            throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);
        }
        switch (compressorID) {
            case exports.Compressor.snappy: {
                Snappy !== null && Snappy !== void 0 ? Snappy : (Snappy = loadSnappy());
                return yield Snappy.uncompress(compressedData, { asBuffer: true });
            }
            case exports.Compressor.zstd: {
                loadZstd();
                if ('kModuleError' in zstd) {
                    throw zstd['kModuleError'];
                }
                return yield zstd.decompress(compressedData);
            }
            case exports.Compressor.zlib: {
                return yield zlibInflate(compressedData);
            }
            default: {
                return compressedData;
            }
        }
    });
}
/**
 * Load ZStandard if it is not already set.
 */
function loadZstd() {
    if (!zstd) {
        zstd = (0, deps_1.getZstdLibrary)();
    }
}
const MESSAGE_HEADER_SIZE = 16;
/**
 * @internal
 *
 * Compresses an OP_MSG or OP_QUERY message, if compression is configured.  This method
 * also serializes the command to BSON.
 */
function compressCommand(command, description) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const finalCommand = description.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)
            ? command
            : new commands_1.OpCompressedRequest(command, {
                agreedCompressor: (_a = description.agreedCompressor) !== null && _a !== void 0 ? _a : 'none',
                zlibCompressionLevel: (_b = description.zlibCompressionLevel) !== null && _b !== void 0 ? _b : 0
            });
        const data = yield finalCommand.toBin();
        return Buffer.concat(data);
    });
}
/**
 * @internal
 *
 * Decompresses an OP_MSG or OP_QUERY response from the server, if compression is configured.
 *
 * This method does not parse the response's BSON.
 */
function decompressResponse(message) {
    return __awaiter(this, void 0, void 0, function* () {
        const messageHeader = {
            length: message.readInt32LE(0),
            requestId: message.readInt32LE(4),
            responseTo: message.readInt32LE(8),
            opCode: message.readInt32LE(12)
        };
        if (messageHeader.opCode !== constants_2.OP_COMPRESSED) {
            const ResponseType = messageHeader.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpReply;
            const messageBody = message.subarray(MESSAGE_HEADER_SIZE);
            return new ResponseType(message, messageHeader, messageBody);
        }
        const header = Object.assign(Object.assign({}, messageHeader), { fromCompressed: true, opCode: message.readInt32LE(MESSAGE_HEADER_SIZE), length: message.readInt32LE(MESSAGE_HEADER_SIZE + 4) });
        const compressorID = message[MESSAGE_HEADER_SIZE + 8];
        const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);
        // recalculate based on wrapped opcode
        const ResponseType = header.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpReply;
        const messageBody = yield decompress(compressorID, compressedBuffer);
        if (messageBody.length !== header.length) {
            throw new error_1.MongoDecompressionError('Message body and message header must be the same length');
        }
        return new ResponseType(message, header, messageBody);
    });
}
