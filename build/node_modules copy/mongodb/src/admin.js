"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Admin = void 0;
const bson_1 = require("./bson");
const execute_operation_1 = require("./operations/execute_operation");
const list_databases_1 = require("./operations/list_databases");
const remove_user_1 = require("./operations/remove_user");
const run_command_1 = require("./operations/run_command");
const validate_collection_1 = require("./operations/validate_collection");
/**
 * The **Admin** class is an internal class that allows convenient access to
 * the admin functionality and commands for MongoDB.
 *
 * **ADMIN Cannot directly be instantiated**
 * @public
 *
 * @example
 * ```ts
 * import { MongoClient } from 'mongodb';
 *
 * const client = new MongoClient('mongodb://localhost:27017');
 * const admin = client.db().admin();
 * const dbInfo = await admin.listDatabases();
 * for (const db of dbInfo.databases) {
 *   console.log(db.name);
 * }
 * ```
 */
class Admin {
    /**
     * Create a new Admin instance
     * @internal
     */
    constructor(db) {
        this.s = { db };
    }
    /**
     * Execute a command
     *
     * The driver will ensure the following fields are attached to the command sent to the server:
     * - `lsid` - sourced from an implicit session or options.session
     * - `$readPreference` - defaults to primary or can be configured by options.readPreference
     * - `$db` - sourced from the name of this database
     *
     * If the client has a serverApi setting:
     * - `apiVersion`
     * - `apiStrict`
     * - `apiDeprecationErrors`
     *
     * When in a transaction:
     * - `readConcern` - sourced from readConcern set on the TransactionOptions
     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions
     *
     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.
     *
     * @param command - The command to execute
     * @param options - Optional settings for the command
     */
    command(command, options) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            return yield (0, execute_operation_1.executeOperation)(this.s.db.client, new run_command_1.RunAdminCommandOperation(command, Object.assign(Object.assign({}, (0, bson_1.resolveBSONOptions)(options)), { session: options === null || options === void 0 ? void 0 : options.session, readPreference: options === null || options === void 0 ? void 0 : options.readPreference, timeoutMS: (_a = options === null || options === void 0 ? void 0 : options.timeoutMS) !== null && _a !== void 0 ? _a : this.s.db.timeoutMS })));
        });
    }
    /**
     * Retrieve the server build information
     *
     * @param options - Optional settings for the command
     */
    buildInfo(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.command({ buildinfo: 1 }, options);
        });
    }
    /**
     * Retrieve the server build information
     *
     * @param options - Optional settings for the command
     */
    serverInfo(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.command({ buildinfo: 1 }, options);
        });
    }
    /**
     * Retrieve this db's server status.
     *
     * @param options - Optional settings for the command
     */
    serverStatus(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.command({ serverStatus: 1 }, options);
        });
    }
    /**
     * Ping the MongoDB server and retrieve results
     *
     * @param options - Optional settings for the command
     */
    ping(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.command({ ping: 1 }, options);
        });
    }
    /**
     * Remove a user from a database
     *
     * @param username - The username to remove
     * @param options - Optional settings for the command
     */
    removeUser(username, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, execute_operation_1.executeOperation)(this.s.db.client, new remove_user_1.RemoveUserOperation(this.s.db, username, Object.assign({ dbName: 'admin' }, options)));
        });
    }
    /**
     * Validate an existing collection
     *
     * @param collectionName - The name of the collection to validate.
     * @param options - Optional settings for the command
     */
    validateCollection(collectionName_1) {
        return __awaiter(this, arguments, void 0, function* (collectionName, options = {}) {
            return yield (0, execute_operation_1.executeOperation)(this.s.db.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));
        });
    }
    /**
     * List the available databases
     *
     * @param options - Optional settings for the command
     */
    listDatabases(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, execute_operation_1.executeOperation)(this.s.db.client, new list_databases_1.ListDatabasesOperation(this.s.db, Object.assign({ timeoutMS: this.s.db.timeoutMS }, options)));
        });
    }
    /**
     * Get ReplicaSet status
     *
     * @param options - Optional settings for the command
     */
    replSetGetStatus(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.command({ replSetGetStatus: 1 }, options);
        });
    }
}
exports.Admin = Admin;
