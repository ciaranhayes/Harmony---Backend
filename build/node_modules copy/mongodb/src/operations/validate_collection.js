"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidateCollectionOperation = void 0;
const error_1 = require("../error");
const command_1 = require("./command");
/** @internal */
class ValidateCollectionOperation extends command_1.CommandOperation {
    constructor(admin, collectionName, options) {
        // Decorate command with extra options
        const command = { validate: collectionName };
        const keys = Object.keys(options);
        for (let i = 0; i < keys.length; i++) {
            if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {
                command[keys[i]] = options[keys[i]];
            }
        }
        super(admin.s.db, options);
        this.options = options;
        this.command = command;
        this.collectionName = collectionName;
    }
    get commandName() {
        return 'validate';
    }
    execute(server, session, timeoutContext) {
        const _super = Object.create(null, {
            executeCommand: { get: () => super.executeCommand }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const collectionName = this.collectionName;
            const doc = yield _super.executeCommand.call(this, server, session, this.command, timeoutContext);
            if (doc.result != null && typeof doc.result !== 'string')
                throw new error_1.MongoUnexpectedServerResponseError('Error with validation data');
            if (doc.result != null && doc.result.match(/exception|corrupt/) != null)
                throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);
            if (doc.valid != null && !doc.valid)
                throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);
            return doc;
        });
    }
}
exports.ValidateCollectionOperation = ValidateCollectionOperation;
