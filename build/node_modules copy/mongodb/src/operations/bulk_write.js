"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkWriteOperation = void 0;
const operation_1 = require("./operation");
/** @internal */
class BulkWriteOperation extends operation_1.AbstractOperation {
    constructor(collection, operations, options) {
        super(options);
        this.options = options;
        this.collection = collection;
        this.operations = operations;
    }
    get commandName() {
        return 'bulkWrite';
    }
    execute(server, session, timeoutContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const coll = this.collection;
            const operations = this.operations;
            const options = Object.assign(Object.assign(Object.assign({}, this.options), this.bsonOptions), { readPreference: this.readPreference, timeoutContext });
            // Create the bulk operation
            const bulk = options.ordered === false
                ? coll.initializeUnorderedBulkOp(options)
                : coll.initializeOrderedBulkOp(options);
            // for each op go through and add to the bulk
            for (let i = 0; i < operations.length; i++) {
                bulk.raw(operations[i]);
            }
            // Execute the bulk
            return yield bulk.execute(Object.assign(Object.assign({}, options), { session }));
        });
    }
}
exports.BulkWriteOperation = BulkWriteOperation;
(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);
