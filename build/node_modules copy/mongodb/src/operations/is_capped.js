"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsCappedOperation = void 0;
const error_1 = require("../error");
const operation_1 = require("./operation");
/** @internal */
class IsCappedOperation extends operation_1.AbstractOperation {
    constructor(collection, options) {
        super(options);
        this.options = options;
        this.collection = collection;
    }
    get commandName() {
        return 'listCollections';
    }
    execute(server, session) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const coll = this.collection;
            const [collection] = yield coll.s.db
                .listCollections({ name: coll.collectionName }, Object.assign(Object.assign({}, this.options), { nameOnly: false, readPreference: this.readPreference, session }))
                .toArray();
            if (collection == null || collection.options == null) {
                throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);
            }
            return !!((_a = collection.options) === null || _a === void 0 ? void 0 : _a.capped);
        });
    }
}
exports.IsCappedOperation = IsCappedOperation;
