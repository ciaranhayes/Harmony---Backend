"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfilingLevelOperation = void 0;
const error_1 = require("../error");
const command_1 = require("./command");
/** @internal */
class ProfilingLevelOperation extends command_1.CommandOperation {
    constructor(db, options) {
        super(db, options);
        this.options = options;
    }
    get commandName() {
        return 'profile';
    }
    execute(server, session, timeoutContext) {
        const _super = Object.create(null, {
            executeCommand: { get: () => super.executeCommand }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const doc = yield _super.executeCommand.call(this, server, session, { profile: -1 }, timeoutContext);
            if (doc.ok === 1) {
                const was = doc.was;
                if (was === 0)
                    return 'off';
                if (was === 1)
                    return 'slow_only';
                if (was === 2)
                    return 'all';
                throw new error_1.MongoUnexpectedServerResponseError(`Illegal profiling level value ${was}`);
            }
            else {
                throw new error_1.MongoUnexpectedServerResponseError('Error with profile command');
            }
        });
    }
}
exports.ProfilingLevelOperation = ProfilingLevelOperation;
