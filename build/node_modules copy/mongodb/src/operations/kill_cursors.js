"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KillCursorsOperation = void 0;
const error_1 = require("../error");
const utils_1 = require("../utils");
const operation_1 = require("./operation");
class KillCursorsOperation extends operation_1.AbstractOperation {
    constructor(cursorId, ns, server, options) {
        super(options);
        this.ns = ns;
        this.cursorId = cursorId;
        this.server = server;
    }
    get commandName() {
        return 'killCursors';
    }
    execute(server, session, timeoutContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (server !== this.server) {
                throw new error_1.MongoRuntimeError('Killcursor must run on the same server operation began on');
            }
            const killCursors = this.ns.collection;
            if (killCursors == null) {
                // Cursors should have adopted the namespace returned by MongoDB
                // which should always defined a collection name (even a pseudo one, ex. db.aggregate())
                throw new error_1.MongoRuntimeError('A collection name must be determined before killCursors');
            }
            const killCursorsCommand = {
                killCursors,
                cursors: [this.cursorId]
            };
            try {
                yield server.command(this.ns, killCursorsCommand, {
                    session,
                    timeoutContext
                });
            }
            catch (error) {
                // The driver should never emit errors from killCursors, this is spec-ed behavior
                (0, utils_1.squashError)(error);
            }
        });
    }
}
exports.KillCursorsOperation = KillCursorsOperation;
(0, operation_1.defineAspects)(KillCursorsOperation, [operation_1.Aspect.MUST_SELECT_SAME_SERVER]);
