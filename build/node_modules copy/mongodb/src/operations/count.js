"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CountOperation = void 0;
const command_1 = require("./command");
const operation_1 = require("./operation");
/** @internal */
class CountOperation extends command_1.CommandOperation {
    constructor(namespace, filter, options) {
        super({ s: { namespace: namespace } }, options);
        this.options = options;
        this.collectionName = namespace.collection;
        this.query = filter;
    }
    get commandName() {
        return 'count';
    }
    execute(server, session, timeoutContext) {
        const _super = Object.create(null, {
            executeCommand: { get: () => super.executeCommand }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const options = this.options;
            const cmd = {
                count: this.collectionName,
                query: this.query
            };
            if (typeof options.limit === 'number') {
                cmd.limit = options.limit;
            }
            if (typeof options.skip === 'number') {
                cmd.skip = options.skip;
            }
            if (options.hint != null) {
                cmd.hint = options.hint;
            }
            if (typeof options.maxTimeMS === 'number') {
                cmd.maxTimeMS = options.maxTimeMS;
            }
            const result = yield _super.executeCommand.call(this, server, session, cmd, timeoutContext);
            return result ? result.n : 0;
        });
    }
}
exports.CountOperation = CountOperation;
(0, operation_1.defineAspects)(CountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);
