"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropSearchIndexOperation = void 0;
const error_1 = require("../../error");
const operation_1 = require("../operation");
/** @internal */
class DropSearchIndexOperation extends operation_1.AbstractOperation {
    constructor(collection, name) {
        super();
        this.collection = collection;
        this.name = name;
    }
    get commandName() {
        return 'dropSearchIndex';
    }
    execute(server, session, timeoutContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const namespace = this.collection.fullNamespace;
            const command = {
                dropSearchIndex: namespace.collection
            };
            if (typeof this.name === 'string') {
                command.name = this.name;
            }
            try {
                yield server.command(namespace, command, { session, timeoutContext });
            }
            catch (error) {
                const isNamespaceNotFoundError = error instanceof error_1.MongoServerError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound;
                if (!isNamespaceNotFoundError) {
                    throw error;
                }
            }
        });
    }
}
exports.DropSearchIndexOperation = DropSearchIndexOperation;
