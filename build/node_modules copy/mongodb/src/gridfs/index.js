"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridFSBucket = void 0;
const error_1 = require("../error");
const mongo_types_1 = require("../mongo_types");
const timeout_1 = require("../timeout");
const utils_1 = require("../utils");
const write_concern_1 = require("../write_concern");
const download_1 = require("./download");
const upload_1 = require("./upload");
const DEFAULT_GRIDFS_BUCKET_OPTIONS = {
    bucketName: 'fs',
    chunkSizeBytes: 255 * 1024
};
/**
 * Constructor for a streaming GridFS interface
 * @public
 */
class GridFSBucket extends mongo_types_1.TypedEventEmitter {
    constructor(db, options) {
        super();
        this.on('error', utils_1.noop);
        this.setMaxListeners(0);
        const privateOptions = (0, utils_1.resolveOptions)(db, Object.assign(Object.assign(Object.assign({}, DEFAULT_GRIDFS_BUCKET_OPTIONS), options), { writeConcern: write_concern_1.WriteConcern.fromOptions(options) }));
        this.s = {
            db,
            options: privateOptions,
            _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),
            _filesCollection: db.collection(privateOptions.bucketName + '.files'),
            checkedIndexes: false,
            calledOpenUploadStream: false
        };
    }
    /**
     * Returns a writable stream (GridFSBucketWriteStream) for writing
     * buffers to GridFS. The stream's 'id' property contains the resulting
     * file's id.
     *
     * @param filename - The value of the 'filename' key in the files doc
     * @param options - Optional settings.
     */
    openUploadStream(filename, options) {
        return new upload_1.GridFSBucketWriteStream(this, filename, Object.assign({ timeoutMS: this.s.options.timeoutMS }, options));
    }
    /**
     * Returns a writable stream (GridFSBucketWriteStream) for writing
     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting
     * file's id.
     */
    openUploadStreamWithId(id, filename, options) {
        return new upload_1.GridFSBucketWriteStream(this, filename, Object.assign(Object.assign({ timeoutMS: this.s.options.timeoutMS }, options), { id }));
    }
    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */
    openDownloadStream(id, options) {
        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { _id: id }, Object.assign({ timeoutMS: this.s.options.timeoutMS }, options));
    }
    /**
     * Deletes a file with the given id
     *
     * @param id - The id of the file doc
     */
    delete(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { timeoutMS } = (0, utils_1.resolveOptions)(this.s.db, options);
            let timeoutContext = undefined;
            if (timeoutMS) {
                timeoutContext = new timeout_1.CSOTTimeoutContext({
                    timeoutMS,
                    serverSelectionTimeoutMS: this.s.db.client.s.options.serverSelectionTimeoutMS
                });
            }
            const { deletedCount } = yield this.s._filesCollection.deleteOne({ _id: id }, { timeoutMS: timeoutContext === null || timeoutContext === void 0 ? void 0 : timeoutContext.remainingTimeMS });
            const remainingTimeMS = timeoutContext === null || timeoutContext === void 0 ? void 0 : timeoutContext.remainingTimeMS;
            if (remainingTimeMS != null && remainingTimeMS <= 0)
                throw new error_1.MongoOperationTimeoutError(`Timed out after ${timeoutMS}ms`);
            // Delete orphaned chunks before returning FileNotFound
            yield this.s._chunksCollection.deleteMany({ files_id: id }, { timeoutMS: remainingTimeMS });
            if (deletedCount === 0) {
                // TODO(NODE-3483): Replace with more appropriate error
                // Consider creating new error MongoGridFSFileNotFoundError
                throw new error_1.MongoRuntimeError(`File not found for id ${id}`);
            }
        });
    }
    /** Convenience wrapper around find on the files collection */
    find(filter = {}, options = {}) {
        return this.s._filesCollection.find(filter, options);
    }
    /**
     * Returns a readable stream (GridFSBucketReadStream) for streaming the
     * file with the given name from GridFS. If there are multiple files with
     * the same name, this will stream the most recent file with the given name
     * (as determined by the `uploadDate` field). You can set the `revision`
     * option to change this behavior.
     */
    openDownloadStreamByName(filename, options) {
        let sort = { uploadDate: -1 };
        let skip = undefined;
        if (options && options.revision != null) {
            if (options.revision >= 0) {
                sort = { uploadDate: 1 };
                skip = options.revision;
            }
            else {
                skip = -options.revision - 1;
            }
        }
        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { filename }, Object.assign(Object.assign({ timeoutMS: this.s.options.timeoutMS }, options), { sort, skip }));
    }
    /**
     * Renames the file with the given _id to the given string
     *
     * @param id - the id of the file to rename
     * @param filename - new name for the file
     */
    rename(id, filename, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = { _id: id };
            const update = { $set: { filename } };
            const { matchedCount } = yield this.s._filesCollection.updateOne(filter, update, options);
            if (matchedCount === 0) {
                throw new error_1.MongoRuntimeError(`File with id ${id} not found`);
            }
        });
    }
    /** Removes this bucket's files collection, followed by its chunks collection. */
    drop(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { timeoutMS } = (0, utils_1.resolveOptions)(this.s.db, options);
            let timeoutContext = undefined;
            if (timeoutMS) {
                timeoutContext = new timeout_1.CSOTTimeoutContext({
                    timeoutMS,
                    serverSelectionTimeoutMS: this.s.db.client.s.options.serverSelectionTimeoutMS
                });
            }
            if (timeoutContext) {
                yield this.s._filesCollection.drop({ timeoutMS: timeoutContext.remainingTimeMS });
                const remainingTimeMS = timeoutContext.getRemainingTimeMSOrThrow(`Timed out after ${timeoutMS}ms`);
                yield this.s._chunksCollection.drop({ timeoutMS: remainingTimeMS });
            }
            else {
                yield this.s._filesCollection.drop();
                yield this.s._chunksCollection.drop();
            }
        });
    }
}
exports.GridFSBucket = GridFSBucket;
/**
 * When the first call to openUploadStream is made, the upload stream will
 * check to see if it needs to create the proper indexes on the chunks and
 * files collections. This event is fired either when 1) it determines that
 * no index creation is necessary, 2) when it successfully creates the
 * necessary indexes.
 * @event
 */
GridFSBucket.INDEX = 'index';
