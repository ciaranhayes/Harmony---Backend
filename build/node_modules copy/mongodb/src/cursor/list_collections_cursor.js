"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListCollectionsCursor = void 0;
const execute_operation_1 = require("../operations/execute_operation");
const list_collections_1 = require("../operations/list_collections");
const abstract_cursor_1 = require("./abstract_cursor");
/** @public */
class ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {
    constructor(db, filter, options) {
        super(db.client, db.s.namespace, options);
        this.parent = db;
        this.filter = filter;
        this.options = options;
    }
    clone() {
        return new ListCollectionsCursor(this.parent, this.filter, Object.assign(Object.assign({}, this.options), this.cursorOptions));
    }
    /** @internal */
    _initialize(session) {
        return __awaiter(this, void 0, void 0, function* () {
            const operation = new list_collections_1.ListCollectionsOperation(this.parent, this.filter, Object.assign(Object.assign(Object.assign({}, this.cursorOptions), this.options), { session, signal: this.signal }));
            const response = yield (0, execute_operation_1.executeOperation)(this.parent.client, operation, this.timeoutContext);
            return { server: operation.server, session, response };
        });
    }
}
exports.ListCollectionsCursor = ListCollectionsCursor;
