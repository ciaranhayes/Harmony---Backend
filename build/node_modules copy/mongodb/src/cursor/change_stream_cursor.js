"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangeStreamCursor = void 0;
const change_stream_1 = require("../change_stream");
const constants_1 = require("../constants");
const aggregate_1 = require("../operations/aggregate");
const execute_operation_1 = require("../operations/execute_operation");
const utils_1 = require("../utils");
const abstract_cursor_1 = require("./abstract_cursor");
/** @internal */
class ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {
    constructor(client, namespace, pipeline = [], options = {}) {
        var _a;
        super(client, namespace, Object.assign(Object.assign({}, options), { tailable: true, awaitData: true }));
        this.pipeline = pipeline;
        this.changeStreamCursorOptions = options;
        this._resumeToken = null;
        this.startAtOperationTime = (_a = options.startAtOperationTime) !== null && _a !== void 0 ? _a : null;
        if (options.startAfter) {
            this.resumeToken = options.startAfter;
        }
        else if (options.resumeAfter) {
            this.resumeToken = options.resumeAfter;
        }
    }
    set resumeToken(token) {
        this._resumeToken = token;
        this.emit(change_stream_1.ChangeStream.RESUME_TOKEN_CHANGED, token);
    }
    get resumeToken() {
        return this._resumeToken;
    }
    get resumeOptions() {
        const options = Object.assign({}, this.changeStreamCursorOptions);
        for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {
            delete options[key];
        }
        if (this.resumeToken != null) {
            if (this.changeStreamCursorOptions.startAfter && !this.hasReceived) {
                options.startAfter = this.resumeToken;
            }
            else {
                options.resumeAfter = this.resumeToken;
            }
        }
        else if (this.startAtOperationTime != null && (0, utils_1.maxWireVersion)(this.server) >= 7) {
            options.startAtOperationTime = this.startAtOperationTime;
        }
        return options;
    }
    cacheResumeToken(resumeToken) {
        if (this.bufferedCount() === 0 && this.postBatchResumeToken) {
            this.resumeToken = this.postBatchResumeToken;
        }
        else {
            this.resumeToken = resumeToken;
        }
        this.hasReceived = true;
    }
    _processBatch(response) {
        const { postBatchResumeToken } = response;
        if (postBatchResumeToken) {
            this.postBatchResumeToken = postBatchResumeToken;
            if (response.batchSize === 0) {
                this.resumeToken = postBatchResumeToken;
            }
        }
    }
    clone() {
        return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, Object.assign({}, this.cursorOptions));
    }
    _initialize(session) {
        return __awaiter(this, void 0, void 0, function* () {
            const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, Object.assign(Object.assign(Object.assign({}, this.cursorOptions), this.changeStreamCursorOptions), { session }));
            const response = yield (0, execute_operation_1.executeOperation)(session.client, aggregateOperation, this.timeoutContext);
            const server = aggregateOperation.server;
            this.maxWireVersion = (0, utils_1.maxWireVersion)(server);
            if (this.startAtOperationTime == null &&
                this.changeStreamCursorOptions.resumeAfter == null &&
                this.changeStreamCursorOptions.startAfter == null &&
                this.maxWireVersion >= 7) {
                this.startAtOperationTime = response.operationTime;
            }
            this._processBatch(response);
            this.emit(constants_1.INIT, response);
            this.emit(constants_1.RESPONSE);
            return { server, session, response };
        });
    }
    getMore(batchSize) {
        const _super = Object.create(null, {
            getMore: { get: () => super.getMore }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield _super.getMore.call(this, batchSize);
            this.maxWireVersion = (0, utils_1.maxWireVersion)(this.server);
            this._processBatch(response);
            this.emit(change_stream_1.ChangeStream.MORE, response);
            this.emit(change_stream_1.ChangeStream.RESPONSE);
            return response;
        });
    }
}
exports.ChangeStreamCursor = ChangeStreamCursor;
