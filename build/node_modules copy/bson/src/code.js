"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Code = void 0;
const bson_value_1 = require("./bson_value");
const utils_1 = require("./parser/utils");
/**
 * A class representation of the BSON Code type.
 * @public
 * @category BSONType
 */
class Code extends bson_value_1.BSONValue {
    get _bsontype() {
        return 'Code';
    }
    /**
     * @param code - a string or function.
     * @param scope - an optional scope for the function.
     */
    constructor(code, scope) {
        super();
        this.code = code.toString();
        this.scope = scope !== null && scope !== void 0 ? scope : null;
    }
    toJSON() {
        if (this.scope != null) {
            return { code: this.code, scope: this.scope };
        }
        return { code: this.code };
    }
    /** @internal */
    toExtendedJSON() {
        if (this.scope) {
            return { $code: this.code, $scope: this.scope };
        }
        return { $code: this.code };
    }
    /** @internal */
    static fromExtendedJSON(doc) {
        return new Code(doc.$code, doc.$scope);
    }
    inspect(depth, options, inspect) {
        inspect !== null && inspect !== void 0 ? inspect : (inspect = utils_1.defaultInspect);
        let parametersString = inspect(this.code, options);
        const multiLineFn = parametersString.includes('\n');
        if (this.scope != null) {
            parametersString += `,${multiLineFn ? '\n' : ' '}${inspect(this.scope, options)}`;
        }
        const endingNewline = multiLineFn && this.scope === null;
        return `new Code(${multiLineFn ? '\n' : ''}${parametersString}${endingNewline ? '\n' : ''})`;
    }
}
exports.Code = Code;
