"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUtf8 = parseUtf8;
const error_1 = require("./error");
let TextDecoderFatal;
let TextDecoderNonFatal;
/**
 * Determines if the passed in bytes are valid utf8
 * @param bytes - An array of 8-bit bytes. Must be indexable and have length property
 * @param start - The index to start validating
 * @param end - The index to end validating
 */
function parseUtf8(buffer, start, end, fatal) {
    if (fatal) {
        TextDecoderFatal !== null && TextDecoderFatal !== void 0 ? TextDecoderFatal : (TextDecoderFatal = new TextDecoder('utf8', { fatal: true }));
        try {
            return TextDecoderFatal.decode(buffer.subarray(start, end));
        }
        catch (cause) {
            throw new error_1.BSONError('Invalid UTF-8 string in BSON document', { cause });
        }
    }
    TextDecoderNonFatal !== null && TextDecoderNonFatal !== void 0 ? TextDecoderNonFatal : (TextDecoderNonFatal = new TextDecoder('utf8', { fatal: false }));
    return TextDecoderNonFatal.decode(buffer.subarray(start, end));
}
